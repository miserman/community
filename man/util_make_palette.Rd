% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util_make_palette.R
\name{util_make_palette}
\alias{util_make_palette}
\title{Format a JavaScript Color Palette}
\usage{
util_make_palette(colors, continuous = length(colors) < 5,
  divergent = length(colors) > 2, polynomial = FALSE, degrees = 6,
  pad = 10, name = "custom", preview = TRUE, print = TRUE)
}
\arguments{
\item{colors}{A vector of color names or HEX codes, or a matrix-like object with
colors in columns, and their RGB values in separate rows.}

\item{continuous}{Logical; if \code{TRUE}, \code{colors} are treated as points in a linear
gradient. One provided color will be from white to that color. Two provided colors will
be between those colors. Three or four provided colors will be between the first and
last color, with the central color (or average of the central colors) as the midpoint.}

\item{divergent}{Logical; if \code{TRUE}, marks continuous scales as divergent,
which will reverse the lower half of the scale.}

\item{polynomial}{Logical; if \code{TRUE}, will fit a polynomial regression model to each color
channel in the specified \code{colors} sequence. Used to either compress a long sequence
(e.g., model a fully manually specified scale), or interpolate a scale between anchors.}

\item{degrees}{Number of polynomial degrees, if \code{polynomial} is \code{TRUE}.}

\item{pad}{If \code{polynomial} is \code{TRUE}, number of repeated observations of the
initial and final colors in the sequence to add in order to reduce warping at the edges.}

\item{name}{Name of the palette.}

\item{preview}{Logical; if \code{TRUE}, makes a plot showing the palette colors / scale.}

\item{print}{Logical; if \code{FALSE}, will not print a version of the palette.}
}
\value{
An invisible list of the created palette.
}
\description{
Make a specially-formatted color palette based on color codes.
}
\examples{
# a discrete palette
util_make_palette(c("red", "green", "blue"), FALSE)

# a continuous palette
util_make_palette("red")

# a divergent continuous palette
util_make_palette(c("red", "green"), divergent = TRUE)
}
