{"version":3,"file":"data_handler.min.js","sources":["../../../../../js/data_handler/index.ts"],"sourcesContent":["'use strict'\r\nimport {value_checks} from './checks'\r\nimport {exporter} from './exporter'\r\nimport * as retrievers from './retrievers'\r\nimport * as formatter from './formatters'\r\nimport * as ingester from './ingesters'\r\nimport * as summary from './summary'\r\nimport * as mapper from './mappers'\r\nimport * as parser from './parsers'\r\nimport type {\r\n  Settings,\r\n  Variable,\r\n  Metadata,\r\n  MeasureInfos,\r\n  DataSets,\r\n  Features,\r\n  Variables,\r\n  References,\r\n  Entities,\r\n  Relations,\r\n  MetaTime,\r\n  LogicalObject,\r\n  Promises,\r\n  DataMaps,\r\n  DataResource,\r\n  MeasureInfo,\r\n  DataPackage,\r\n  EntityFeatureSet,\r\n  Entity,\r\n} from '../types'\r\nimport {SiteDataView} from '../site/dataview'\r\n\r\nexport default class DataHandler {\r\n  constructor(\r\n    settings?: Settings,\r\n    defaults?: {[index: string]: string},\r\n    data?: DataSets,\r\n    hooks?: {[index: string]: Function}\r\n  ) {\r\n    this.defaults = defaults || {}\r\n    this.settings = settings || {}\r\n    this.metadata = this.settings.metadata || {datasets: []}\r\n    this.sets = data || {}\r\n    this.hooks = hooks || {}\r\n    this.get_value = this.get_value.bind(this)\r\n    this.dynamic_load = 'dataviews' in this.settings && this.settings.settings && !!this.settings.settings.partial_init\r\n    this.settings.view_names = this.dynamic_load ? Object.keys(this.settings.dataviews) : ['default_view']\r\n    if ('string' === typeof this.metadata.datasets) this.metadata.datasets = [this.metadata.datasets]\r\n    const init = () => {\r\n      if (!this.metadata.datasets || !this.metadata.datasets.length) {\r\n        this.metadata.datasets = Object.keys(this.info)\r\n        if (!this.metadata.datasets.length) this.metadata.datasets = Object.keys(this.sets)\r\n      }\r\n      if (this.metadata.measure_info) {\r\n        const info = parser.measure_info(this.metadata.measure_info)\r\n        this.metadata.datasets.forEach((d: string) => {\r\n          if (info._references) this.info[d]._references = info._references\r\n          const v = this.info[d].schema.fields\r\n          v.forEach(e => (e.name in info ? (e.info = info[e.name] as MeasureInfo) : ''))\r\n        })\r\n      }\r\n      this.map_variables()\r\n      if (this.metadata.datasets.length) {\r\n        this.metadata.datasets.forEach((k: string) => {\r\n          this.loaded[k] = k in this.sets\r\n          this.inited[k] = false\r\n          this.data_processed[k] = new Promise(resolve => {\r\n            this.data_promise[k] = resolve\r\n          })\r\n          if (k in this.info)\r\n            this.info[k].site_file = (this.metadata.url ? this.metadata.url + '/' : '') + this.info[k].name + '.json'\r\n          if (this.loaded[k]) {\r\n            this.ingest_data(this.sets[k], k)\r\n          } else if (\r\n            !this.dynamic_load ||\r\n            (this.settings.settings && !this.settings.settings.partial_init) ||\r\n            !this.defaults.dataset ||\r\n            k === this.defaults.dataset\r\n          ) {\r\n            this.retrieve(k, this.info[k].site_file)\r\n          }\r\n        })\r\n      } else {\r\n        setTimeout(() => {\r\n          this.inited.first = true\r\n          this.hooks.init && this.hooks.init()\r\n          this.hooks.onload && this.hooks.onload()\r\n        }, 0)\r\n      }\r\n    }\r\n    if (this.metadata.package && !this.metadata.info) {\r\n      if ('undefined' === typeof window) {\r\n        require('https')\r\n          .get(this.metadata.url + this.metadata.package, (r: {on: Function}) => {\r\n            const c: string[] = []\r\n            r.on('data', (d: string) => {\r\n              c.push(d)\r\n            })\r\n            r.on('end', () => {\r\n              this.info = {}\r\n              const dp: DataPackage = JSON.parse(c.join(''))\r\n              if (dp.measure_info) this.metadata.measure_info = dp.measure_info\r\n              dp.resources.forEach((r: DataResource) => (this.info[r.name] = r))\r\n              init()\r\n            })\r\n          })\r\n          .end()\r\n      } else {\r\n        const f = new window.XMLHttpRequest()\r\n        f.onreadystatechange = () => {\r\n          if (4 === f.readyState) {\r\n            if (200 === f.status) {\r\n              this.info = {}\r\n              const dp = JSON.parse(f.responseText)\r\n              if (dp.measure_info) this.metadata.measure_info = dp.measure_info\r\n              dp.resources.forEach((r: DataResource) => (this.info[r.name] = r))\r\n              init()\r\n            } else {\r\n              throw new Error('failed to load datapackage: ' + f.responseText)\r\n            }\r\n          }\r\n        }\r\n        f.open('GET', this.metadata.url + this.metadata.package)\r\n        f.send()\r\n      }\r\n    } else {\r\n      if (this.metadata.info) this.info = this.metadata.info\r\n      init()\r\n    }\r\n  }\r\n  hooks: {[index: string]: Function} = {}\r\n  defaults: {[index: string]: string} = {dataview: 'default_view', time: 'time'}\r\n  settings: Settings = {}\r\n  metadata: Metadata = {datasets: []}\r\n  info: {[index: string]: DataResource} = {}\r\n  sets: DataSets = {}\r\n  dynamic_load = false\r\n  all_data_ready: Function = () => false\r\n  data_ready: Promise<void> = new Promise(resolve => {\r\n    this.all_data_ready = resolve\r\n  })\r\n  features: Features = {}\r\n  variables: Variables = {}\r\n  variable_codes: Variables = {}\r\n  variable_info: MeasureInfos = {}\r\n  references: References = {}\r\n  entities: Entities = {}\r\n  entity_tree: {[index: string]: Relations} = {}\r\n  meta: MetaTime = {\r\n    times: {},\r\n    variables: {},\r\n    ranges: {},\r\n    overall: {\r\n      range: [Infinity, -Infinity],\r\n      value: [],\r\n    },\r\n  }\r\n  loaded: LogicalObject = {}\r\n  onload: () => {}\r\n  inited: {[index: string]: number | NodeJS.Timeout | boolean} = {}\r\n  inited_summary: Promises = {}\r\n  summary_ready: {[index: string]: Function} = {}\r\n  entity_features: EntityFeatureSet = {}\r\n  data_maps: DataMaps = {}\r\n  data_queue: {[index: string]: {[index: string]: Function}} = {}\r\n  data_promise: {[index: string]: Function} = {}\r\n  data_processed: Promises = {}\r\n  load_requests: {[index: string]: string} = {}\r\n  retrieve = async function (this: DataHandler, name: string, url: string) {\r\n    if (!this.load_requests[name]) {\r\n      this.load_requests[name] = url\r\n      const f = new window.XMLHttpRequest()\r\n      f.onreadystatechange = () => {\r\n        if (4 === f.readyState) {\r\n          if (200 === f.status) {\r\n            this.ingest_data(JSON.parse(f.responseText), name)\r\n          } else {\r\n            throw new Error('DataHandler.retrieve failed: ' + f.responseText)\r\n          }\r\n        }\r\n      }\r\n      f.open('GET', url, true)\r\n      f.send()\r\n    }\r\n  }\r\n  format_value = formatter.value\r\n  format_label = formatter.label\r\n  ingest_data = ingester.data\r\n  ingest_map = ingester.map\r\n  load_id_maps = ingester.id_maps\r\n  init_summary = summary.init\r\n  calculate_summary = summary.calculate\r\n  map_variables = mapper.variables\r\n  map_entities = mapper.entities\r\n  parse_query = parser.query\r\n  export = exporter\r\n  get_variable = async function (this: DataHandler, variable: string, view: SiteDataView): Promise<Variable> {\r\n    if (variable in this.variables) await this.calculate_summary(variable, view, true)\r\n    return this.variables[variable]\r\n  }\r\n  get_value = function vector(this: DataHandler, r: {variable: string; entity: Entity}): number[] {\r\n    if (this.variables[r.variable].is_time) {\r\n      return r.entity.time.value as number[]\r\n    } else {\r\n      const v = this.variables[r.variable].code\r\n      return (\r\n        v in r.entity.data ? (Array.isArray(r.entity.data[v]) ? r.entity.data[v] : [r.entity.data[v]]) : [NaN]\r\n      ) as number[]\r\n    }\r\n  }\r\n  public static retrievers = retrievers\r\n  public static checks = value_checks\r\n}\r\n"],"names":["checks_1","require","exporter_1","retrievers","tslib_1","__importStar","formatter","ingester","summary","mapper","parser","DataHandler","constructor","settings","defaults","data","hooks","this","dataview","time","metadata","datasets","info","sets","dynamic_load","all_data_ready","data_ready","Promise","resolve","features","variables","variable_codes","variable_info","references","entities","entity_tree","meta","times","ranges","overall","range","Infinity","value","loaded","inited","inited_summary","summary_ready","entity_features","data_maps","data_queue","data_promise","data_processed","load_requests","retrieve","name","url","f","window","XMLHttpRequest","onreadystatechange","readyState","status","Error","responseText","ingest_data","JSON","parse","open","send","format_value","format_label","label","ingest_map","map","load_id_maps","id_maps","init_summary","init","calculate_summary","calculate","map_variables","map_entities","parse_query","query","export","get_variable","variable","view","get_value","r","is_time","entity","v","code","Array","isArray","NaN","bind","partial_init","view_names","Object","keys","dataviews","length","measure_info","forEach","d","_references","schema","fields","e","k","site_file","dataset","setTimeout","first","onload","package","get","c","on","push","dp","join","resources","end","checks","value_checks"],"mappings":"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"}